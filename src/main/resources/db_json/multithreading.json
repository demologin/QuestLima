{
  "3001": {
    "id": 3001,
    "question": "Чем процесс отличается от потока?",
    "answer": "Процесс — экземпляр программы во время выполнения, независимый объект, которому выделены системные ресурсы (например, процессорное время и память). <p>Каждый процесс выполняется в отдельном адресном пространстве: один процесс не может получить доступ к переменным и структурам данных другого. Если процесс хочет получить доступ к чужим ресурсам, необходимо использовать межпроцессное взаимодействие. Это могут быть конвейеры, файлы, каналы связи между компьютерами и многое другое. Для каждого процесса ОС создает так называемое «виртуальное адресное пространство», к которому процесс имеет прямой доступ. Это пространство принадлежит процессу, содержит только его данные и находится в полном его распоряжении. Операционная система же отвечает за то, как виртуальное пространство процесса проецируется на физическую память. <p>Поток(thread) — способ выполнения процесса, определяющий последовательность исполнения кода в процессе. Потоки всегда создаются в контексте какого-либо процесса, и вся их жизнь проходит только в его границах. Потоки могут исполнять один и тот же код и манипулировать одними и теми же данными, а также совместно использовать описатели объектов ядра, поскольку таблица описателей создается не в отдельных потоках, а в процессах. Так как потоки расходуют существенно меньше ресурсов, чем процессы, в процессе выполнения работы выгоднее создавать дополнительные потоки и избегать создания новых процессов."
  },
  "3002": {
    "id": 3002,
    "question": "Многопоточность",
    "answer": "Multithreading - это принцип построения программы, при котором несколько блоков кода могут выполняться одновременно"
  },
  "3003": {
    "id": 3003,
    "question": "Чем Thread отличается от Runnable? Когда нужно использовать Thread, а когда Runnable? (Ответ что тред - это класс, а ранбл интерфейс - считается не полным, нужно рассказать подробно)",
    "answer": "Thread - это класс, некоторая надстройка над физическим потоком. Runnable - это интерфейс, представляющий абстракцию над выполняемой задачей. Помимо того, что Runnable помогает разрешить проблему множественного наследования, несомненный плюс от его использования состоит в том, что он позволяет логически отделить логику выполнения задачи от непосредственного управления потоком. В классе Thread имеется несколько методов, которые можно переопределить в порожденном классе. Из них обязательному переопределению подлежит только метод run(). Этот же метод, безусловно, должен быть определен и при реализации интерфейса Runnable. Некоторые программисты считают, что создавать подкласс, порожденный от класса Thread, следует только в том случае, если нужно дополнить его новыми функциями. Так, если переопределять любые другие методы из класса Thread не нужно, то можно ограничиться только реализацией интерфейса Runnable. Кроме того, реализация интерфейса Runnable позволяет создаваемому потоку наследовать класс, отличающийся от Thread."
  },
  "3004": {
    "id": 3004,
    "question": "Что такое монитор? Как монитор реализован в java?",
    "answer":"Монитор - (средство обеспечения контроля за доступом к ресурсу)механизм синхронизации потоков, обеспечивающий доступ к неразделяемым ресурсам. Частью монитора является mutex, который встроен в класс Object и имеется у каждого объекта. Удобно представлять mutex как id захватившего его объекта. Если этот id равен 0 – ресурс свободен. Если не 0 – ресурс занят. Можно встать в очередь и ждать его освобождения. В Java монитор реализован с помощью ключевого слова synchronized."
  },
  "3005": {
    "id": 3005,
    "question": "Что такое синхронизация? Какие способы синхронизации существуют в java?",
    "answer": "Синхронизация это процесс, который позволяет выполнять потоки параллельно. В Java все объекты имеют блокировку, благодаря которой только один поток одновременно может получить доступ к критическому коду в объекте. Такая синхронизация помогает предотвратить повреждение состояния объекта. <p>Способы синхронизации в Java: <p>Системная синхронизация с использованием wait()/notify(). <p>Поток, который ждет выполнения каких-либо условий, вызывает у этого объекта метод wait(), предварительно захватив его монитор. На этом его работа приостанавливается. Другой поток может вызвать на этом же самом объекте метод notify() (опять же, предварительно захватив монитор объекта), в результате чего, ждущий на объекте поток «просыпается» и продолжает свое выполнение. В обоих случаях монитор надо захватывать в явном виде, через synchronized-блок, потому как методы wait()/notify() не синхронизированы! <p>Системная синхронизация с использованием join(). <p>Метод join(), вызванный у экземпляра класса Thread, позволяет текущему потоку остановиться до того момента, как поток, связанный с этим экземпляром, закончит работу. <p>Использование классов из пакета java.util.concurrent.Locks - механизмы синхронизации потоков, альтернативы базовым synchronized, wait, notify, notifyAll: Lock, Condition, ReadWriteLock."
  },
  "3006": {
    "id": 3006,
    "question": "Как работают методы wait(), notify() и notifyAll()?",
    "answer": "wait(): освобождает монитор и переводит вызывающий поток в состояние ожидания до тех пор, пока другой поток не вызовет метод notify()/notifyAll(); <p>notify(): продолжает работу потока, у которого ранее был вызван метод wait(); <p>notifyAll(): возобновляет работу всех потоков, у которых ранее был вызван метод wait(). <p>Когда вызван метод wait(), поток освобождает блокировку на объекте и переходит из состояния Работающий (Running) в состояние Ожидания (Waiting). Метод notify() подаёт сигнал одному из потоков, ожидающих на объекте, чтобы перейти в состояние Работоспособный (Runnable). При этом невозможно определить, какой из ожидающих потоков должен стать работоспособным. Метод notifyAll() заставляет все ожидающие потоки для объекта вернуться в состояние Работоспособный (Runnable). Если ни один поток не находится в ожидании на методе wait(), то при вызове notify() или notifyAll() ничего не происходит. <p>wait(), notify() и notifyAll() должны вызываться только из синхронизированного кода."
  },
  "3007": {
    "id": 3007,
    "question": "В каких состояниях может находиться поток?",
    "answer": "New - объект класса Thread создан, но еще не запущен. Он еще не является потоком выполнения и естественно не выполняется. <p>Runnable - поток готов к выполнению, но планировщик еще не выбрал его. <p>Running – поток выполняется. <p>Waiting/blocked/sleeping - поток блокирован или поток ждет окончания работы другого потока. <p>Dead - поток завершен. Будет выброшено исключение при попытке вызвать метод start() для dead потока. <p>public enum State (У класса Thread есть внутренний класс State - состояние, а также метод public State getState().) <p>{<p>NEW, — поток создан, но еще не запущен; <p>RUNNABLE, — поток выполняется; <p>BLOCKED, — поток блокирован; Все потоки заблочены и ожидают. <p>WAITING, — поток ждет окончания работы другого потока; <p>TIMED_WAITING, — поток некоторое время ждет окончания другого потока; <p>TERMINATED; — поток завершен. <p>}"
  },
  "3008": {
    "id": 3008,
    "question": "Что такое семафор (класс)? Как он реализован в Java?",
    "answer": "Semaphore – это новый тип синхронизатора: семафор со счётчиком, реализующий шаблон синхронизации Семафор. Доступ управляется с помощью счётчика: изначальное значение счетчика задается в конструкторе при создании синхронизатора, когда поток заходит в заданный блок кода, то значение счетчика уменьшается на единицу, когда поток его покидает, то увеличивается. Если значение счетчика равно нулю, то текущий поток блокируется, пока кто-нибудь не выйдет из защищаемого блока. Semaphore используется для защиты дорогих ресурсов, которые доступны в ограниченном количестве, например подключение к базе данных в пуле."
  },
  "3009": {
    "id": 3009,
    "question": "Что означает ключевое слово volatile? Почему операции над volatile переменными не атомарны?",
    "answer": "Переменная volatile является атомарной для чтения, но операции над переменной НЕ являются атомарными. Поля, для которых неприемлемо увидеть «несвежее» (stale) значение в результате кэширования или переупорядочения. <p>Если происходит какая-то операция, например, инкримент, то атомарность уже не обеспечивается, потому что сначала выполняется чтение(1), потом изменение(2) в локальной памяти, а затем запись(3). Такая операция не является атомарной и в неё может вклиниться поток по середине. <p>Атомарная операция выглядит единой и неделимой командой процессора. <p>Переменная volatile находится в хипе, а не в кэше стека. <p>Атомарная - выполняется целиком, либо не выполняется вовсе"
  },
  "3010": {
    "id": 3010,
    "question": "Что означает ключевое слово volatile? Почему операции над volatile переменными не атомарны?",
    "answer": "volatile не гарантирует атомарность. Например, операция count++ не станет атомарной просто потому что count объявлена volatile. C другой стороны class AtomicInteger предоставляет атомарный метод для выполнения таких комплексных операций атомарно, например getAndIncrement() – атомарная замена оператора инкремента, его можно использовать, чтобы атомарно увеличить текущее значение на один. Похожим образом сконструированы атомарные версии и для других типов данных. <p>Когда несколько потоков пытаются одновременно обновить одну и ту же переменную, используя алгоритм CAS (Compare and Swap) (Сравнение и обмен), выигрывает один и обновляет значение переменной, а остальные проигрывают. Но проигравшие не наказываются приостановкой нити. Они могут повторить операцию или просто ничего не делать."
  },
  "3011": {
    "id": 3011,
    "question": "Что такое потоки демоны? Для чего они нужны? Как создать поток-демон?",
    "answer": "Потоки-демоны работают в фоновом режиме вместе с программой, но не являются неотъемлемой частью программы. Если какой-либо процесс может выполняться на фоне работы основных потоков выполнения и его деятельность заключается в обслуживании основных потоков приложения, то такой процесс может быть запущен как поток-демон с помощью метода setDaemon(boolean value), вызванного у потока до его запуска. Метод boolean isDaemon() позволяет определить, является ли указанный поток демоном или нет. Основной поток приложения может завершить выполнение потока-демона (в отличие от обычных потоков) с окончанием кода метода main(), не обращая внимания, что поток-демон еще работает. <p>Поток демон можно сделать только если он еще не запущен. Пример демона - GC."
  },
  "3012": {
    "id": 3012,
    "question": "Что такое приоритет потока? На что он влияет? Какой приоритет у потоков по умолчанию?",
    "answer": "Приоритеты потоков используются планировщиком потоков для принятия решений о том, когда какому из потоков будет разрешено работать. Теоретически высокоприоритетные потоки получают больше времени процессора, чем низкоприоритетные. Практически объем времени процессора, который получает поток, часто зависит от нескольких факторов помимо его приоритета(является ли поток демоном). <p>Чтобы установить приоритет потока, используется метод класса Thread: final void setPriority(int level). Значение level изменяется в пределах от Thread.MIN_PRIORITY = 1 до Thread.MAX_PRIORITY = 10. Приоритет по умолчанию - Thread.NORM_PRlORITY = 5. <p>Получить текущее значение приоритета потока можно вызвав метод: final int getPriority() у экземпляра класса Thread. <p>Метод yield() можно использовать для того чтобы принудить планировщик выполнить другой поток, который ожидает своей очереди."
  },
  "3013": {
    "id": 3013,
    "question": "Как работает Thread.join()? Для чего он нужен?",
    "answer": "Когда поток вызывает join(), он будет ждать пока поток, к которому он присоединяется, будет завершён, либо отработает переданное время: <p>void join() <p>void join(long millis) - с временем ожидания <p>void join(long millis, int nanos) <p>Применение: при распараллелили вычисления, вам надо дождаться результатов, чтобы собрать их в кучу и продолжить выполнение."
  },
  "3014": {
    "id": 3014,
    "question": "Чем отличаются методы wait() и sleep()?",
    "answer": "метод sleep() - приостанавливает поток на указанное время. Состояние меняется на WAITING, по истечению - RUNNABLE. <p>метод wait() - меняет состояние потока на WAITING. Может быть вызван только у объекта владеющего блокировкой, в противном случае выкинется исключение IllegalMonitorStateException"
  },
  "3015": {
    "id": 3015,
    "question": "Можно ли вызвать start() для одного потока дважды?",
    "answer": "Нельзя стартовать поток больше, чем единожды. В частности, поток не может быть перезапущен, если он уже завершил выполнение. <p>Выдает: IllegalThreadStateException"
  },
  "3016": {
    "id": 3016,
    "question": "Как правильно остановить поток? Для чего нужны методы .stop(), .interrupt(), .interrupted(), .isInterrupted()",
    "answer": "Как остановить поток? <p>На данный момент в Java принят уведомительный порядок остановки потока (хотя JDK 1.0 и имеет несколько управляющих выполнением потока методов, например stop(), suspend() и resume() - в следующих версиях JDK все они были помечены как deprecated из-за потенциальных угроз взаимной блокировки). Для корректной остановки потока можно использовать метод класса Thread - interrupt(). Этот метод выставляет внутренний флаг-статус прерывания. В дальнейшем состояние этого флага можно проверить с помощью метода isInterrupted() или Thread.interrupted() (для текущего потока). Метод interrupt() также способен вывести поток из состояния ожидания или спячки. Т.е. если у потока были вызваны методы sleep() или wait() – текущее состояние прервется и будет выброшено исключение InterruptedException. Флаг в этом случае не выставляется. <p>Схема действия при этом получается следующей: <p>Реализовать поток. <p>В потоке периодически проводить проверку статуса прерывания через вызов isInterrupted(). <p>Если состояние флага изменилось или было выброшено исключение во время ожидания/спячки, следовательно поток пытаются остановить извне. <p>Принять решение – продолжить работу (если по каким-то причинам остановиться невозможно) или освободить заблокированные потоком ресурсы и закончить выполнение. Возможная проблема, которая присутствует в этом подходе – блокировки на потоковом вводе-выводе. Если поток заблокирован на чтении данных - вызов interrupt() из этого состояния его не выведет. Решения тут различаются в зависимости от типа источника данных. Если чтение идет из файла – долговременная блокировка крайне маловероятна и тогда можно просто дождаться выхода из метода read(). Если же чтение каким-то образом связано с сетью – стоит использовать неблокирующий ввод-вывод из Java NIO. <p>Второй вариант реализации метода остановки (а также и приостановки) – сделать собственный аналог interrupt(). Т.е. объявить в классе потока флаги – на остановку и/или приостановку и выставлять их путем вызова заранее определённых методов извне. Методика действия при этом остаётся прежней – проверять установку флагов и принимать решения при их изменении. Недостатки такого подхода. Во-первых, потоки в состоянии ожидания таким способом не «оживить». Во-вторых, выставление флага одним потоком совсем не означает, что второй поток тут же его увидит. Для увеличения производительности виртуальная машина использует кеш данных потока, в результате чего обновление переменной у второго потока может произойти через неопределенный промежуток времени (хотя допустимым решением будет объявить переменную-флаг как volatile). <p>Почему не рекомендуется использовать метод Thread.stop()? <p>При принудительной остановке (приостановке) потока, stop() прерывает поток в недетерменированном месте выполнения, в результате становится совершенно непонятно, что делать с принадлежащими ему ресурсами. Поток может открыть сетевое соединение - что в таком случае делать с данными, которые еще не вычитаны? Где гарантия, что после дальнейшего запуска потока (в случае приостановки) он сможет их дочитать? Если поток блокировал разделяемый ресурс, то как снять эту блокировку и не переведёт ли принудительное снятие к нарушению консистентности системы? То же самое можно расширить и на случай соединения с базой данных: если поток остановят посередине транзакции, то кто ее будет закрывать? Кто и как будет разблокировать ресурсы? <p>В чем разница между interrupted() и isInterrupted()? <p>Механизм прерывания работы потока в Java реализован с использованием внутреннего флага, известного как статус прерывания. Прерывание потока вызовом Thread.interrupt() устанавливает этот флаг. Методы Thread.interrupted() и isInterrupted() позволяют проверить, является ли поток прерванным. Когда прерванный поток проверяет статус прерывания, вызывая статический метод Thread.interrupted(), статус прерывания сбрасывается. Нестатический метод isInterrupted() используется одним потоком для проверки статуса прерывания у другого потока, не изменяя флаг прерывания."
  },
  "3017": {
    "id": 3017,
    "question": "Чем Runnable отличается от Callable?",
    "answer": "Интерфейс Runnable появился в Java 1.0, а интерфейс Callable был введен в Java 5.0 в составе библиотеки java.util.concurrent; <p>Классы, реализующие интерфейс Runnable для выполнения задачи должны реализовывать метод run(). Классы, реализующие интерфейс Callable - метод call(); <p>Метод Runnable.run() не возвращает никакого значения, <p>Callable - это параметризованный функциональный интерфейс. Callable.call() возвращает Object, если он не параметризован, иначе указанный тип. <p>Метод run() НЕ может выбрасывать проверяемые исключения, в то время как метод call() может."
  },
  "3018": {
    "id": 3018,
    "question": "Что такое FutureTask?",
    "answer": "FutureTask представляет собой отменяемое асинхронное вычисление в параллельном потоке. Этот класс предоставляет базовую реализацию Future, с методами для запуска и остановки вычисления, методами для запроса состояния вычисления и извлечения результатов. Результат может быть получен только когда вычисление завершено, метод получения будет заблокирован, если вычисление ещё не завершено. Объекты FutureTask могут быть использованы для обёртки объектов Callable и Runnable. Так как FutureTask помимо Future реализует Runnable, его можно передать в Executor на выполнение."
  },
  "3019": {
    "id": 3019,
    "question": "Что такое deadlock?",
    "answer": "Взаимная блокировка (deadlock) - явление при котором все потоки находятся в режиме ожидания и своё состояние не меняют. Происходит, когда достигаются состояния: <p>Взаимного исключения: по крайней мере один ресурс занят в режиме неделимости и следовательно только один поток может использовать ресурс в данный момент времени. <p>Удержания и ожидания: поток удерживает как минимум один ресурс и запрашивает дополнительные ресурсы, которые удерживаются другими потоками. <p>Отсутствия предочистки: операционная система не переназначает ресурсы: если они уже заняты, они должны отдаваться удерживающим потокам сразу же. <p>Цикличного ожидания: поток ждет освобождения ресурса другим потоком, который в свою очередь ждёт освобождения ресурса заблокированного первым потоком. <p>Простейший способ избежать взаимной блокировки – не допускать цикличного ожидания. Этого можно достичь, получая мониторы разделяемых ресурсов в определенном порядке и освобождая их в обратном порядке."
  },
  "3020": {
    "id": 3020,
    "question": "Что такое livelock?",
    "answer": "livelock – тип взаимной блокировки, при котором несколько потоков выполняют бесполезную работу, попадая в зацикленность при попытке получения каких-либо ресурсов. При этом их состояния постоянно изменяются в зависимости друг от друга. Фактической ошибки не возникает, но КПД системы падает до 0. Часто возникает в результате попыток предотвращения deadlock. <p>Реальный пример livelock, – когда два человека встречаются в узком коридоре и каждый, пытаясь быть вежливым, отходит в сторону, и так они бесконечно двигаются из стороны в сторону, абсолютно не продвигаясь в нужном им направлении."
  }


}