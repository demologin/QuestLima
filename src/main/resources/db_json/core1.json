{
  "1001": {
    "id": 1001,
    "question": "Что такое ООП?",
    "answer": "ООП - методология программирования, основанная на представлении программы в виде совокупности объектов, каждый из которых является экземпляром определенного класса, а классы образуют иерархию наследования. <p>Согласно парадигме ООП программа состоит из объектов, обменивающихся сообщениями. Объекты могут обладать состоянием, единственный способ изменить состояние объекта - передать ему сообщение, в ответ на которое, объект может изменить собственное состояние. <p>Класс — это описание еще не созданного объекта, как бы общий шаблон, состоящий из полей, методов и конструктора, а объект – экземпляр класса, созданный на основе этого описания."
  },
  "1002": {
    "id": 1002,
    "question": "Какие преимущества у ООП?",
    "answer": "Легко читается - не нужно выискивать в коде функции и выяснять, за что они отвечают. <p>Быстро пишется - можно быстро создать сущности, с которыми должна работать программа. <p>Простота реализации большого функционала - т.к. на написание кода уходит меньше времени, можно гораздо быстрее создать приложение с множеством возможностей. <p>Меньше повторений кода - не нужно писать однотипные функции для разных сущностей."
  },
  "1003": {
    "id": 1003,
    "question": "Какие недостатки у ООП?",
    "answer": "Потребление памяти - объекты потребляют больше оперативной памяти, чем примитивные типы данных. <p>Снижает производительность - многие вещи технически реализованы иначе, поэтому они используют больше ресурсов. <p>Неэффективность и неэкономное распределения памяти на этапе выполнения (по причине издержек на динамическое связывание и проверки типов на этапе выполнения). <p>Излишняя универсальность. Часто содержится больше методов, чем это реально необходимо текущей программе. А поскольку лишние методы не могут быть удалены, они становятся мертвым грузом. <p>Сложно начать - парадигма ООП сложнее функционального программирования, поэтому на старт уходит больше времени"
  },
  "1004": {
    "id": 1004,
    "question": "Назовите основные принципы ООП",
    "answer": "Абстракция <p>Инкапсуляция <p>Наследование <p>Полиморфизм"
  },
  "1005": {
    "id": 1005,
    "question": "Что такое инкапсуляция? (С примером)",
    "answer": "Свойство системы, которое объединяет данные и методы, манипулирующие этими данными, а также защищает и то, и другое от внешнего вмешательства или неправильного использования. <p>Инкапсуляция - это объединение данных и методов работы с этими данными в одной упаковке («капсуле»). <p>Чтобы малейшее изменение в классе не влекло за собой изменение внешнего поведения класса."
  },
  "1006": {
    "id": 1006,
    "question": "Что такое наследование? (С примером)",
    "answer": "Свойство системы, которое позволяет описать новый класс на основе уже существующего с частично или полностью заимствованной функциональностью."
  },
  "1007": {
    "id": 1007,
    "question": "Что такое полиморфизм? (С примером)",
    "answer": "Полиморфизм – предоставляет возможность единообразно обрабатывать объекты с различной реализацией при условии наличия у них общего интерфейса или класса. <p>Есть три вида полиморфизма: <p>-ad hoc полиморфизм, основан на различении типов. Для различных типов аргументов используется разный код метода, пример статического - перегрузка метода. Пример динамического - переопределение метода.<p>-параметрический полиморфизм - ситуация, когда один и тот же метод работает с аргументами различных типов одинаково, не зависимо от их точного типа. Пример — функция, работающая с объектом некоторого класса C, может без изменений работать с объектом порождённого от C класса (этот вид полиморфизма часто называют полиморфизм включения).<p>-subtype полиморфизм - самый популярный - возможность объектов с одинаковой спецификацией(интерфейс\\класс\\abstract класс) иметь различную реализацию.<p>Пример: Переопределение методов, интерфейсы."
  },
  "1008": {
    "id": 1008,
    "question": "Что такое ассоциация?",
    "answer": "Есть два типа связи между объектами: ассоциация, которая делится на композицию и агрегацию, и наследование. <p>Ассоциация - обозначает связь между объектами. Например, игрок играет в определенной команде. <p>Ассоциация означает, что объекты двух классов могут ссылаться один на другой, иметь некоторую связь между друг другом. Например Менеджер может выписать Счет. Соответственно возникает ассоциация между Менеджером и Счетом. Еще пример — Преподаватель и Студент — т.е. какой-то Студент учится у какого-то Преподавателя. Ассоциация и есть описание связи между двумя объектами. Студент учится у Преподавателя. Идея достаточно простая — два объекта могут быть связаны между собой и это надо как-то описать.<p>",
    "url": {
      "Отношения между классами (объектами)": "https://java-course.ru/begin/relations/"
    }
  },
  "1009": {
    "id": 1009,
    "question": "Что такое композиция?",
    "answer": "Композиция — еще более «жесткое отношение, когда объект не только является частью другого объекта, но и вообще не может принадлежат еще кому-то. Например Машина и Двигатель. Хотя двигатель может быть и без машины, но он вряд ли сможет быть в двух или трех машинах одновременно. В отличии от студента, который может входить и в другие группы тоже. <p>Например, в класс автомобиля содержит объект класса электрического двигателя:",
    "images": "images/dbImage/1009.png"
  },
  "1010": {
    "id": 1010,
    "question": "Что такое агрегация?",
    "answer": "Агрегация является особой формой ассоциации. Это более конкретизированные отношения между объектами. <p>Агрегация — отношение когда один объект является частью другого. <p>Например: Студент входит в Группу любителей физики. Это представляет отношения HAS-A. <p>Агрегация определяет отношение HAS A (имеет), но связь слабее, чем в композиции, т.к. объекты будут равноправны."
  },
  "1011": {
    "id": 1011,
    "question": "Расскажите про раннее и позднее связывание.",
    "answer": "Связывание означает наличие связи между ссылкой и кодом. Например, переменная, на которую вы ссылаетесь, привязана к коду, в котором она определена. Аналогично, вызываемый метод привязан к месту в коде, где он определен. <p>Раннее связывание. Если метод известен компилятору,  то происходит ранее связывание на этапе компиляции (early binding), также называют статическим связыванием. Используется для final, перегруженных, статических методов. <p>Позднее связывание (late binding) - вызов метода возможен только во время выполнения, т.к. у компилятора нет информации, чтобы проверить корректность такого вызова. В java это возможно при помощи рефлексии. Используется для переопределенных и абстрактных методов.Вот пример: Object a = ... // какое-то присваивание a.toString(); На этапе компиляции мы не знаем, какого типа объект a. Он может быть как собственно Object, так и любым его наследником, в котором метод toString() переопределён. Именно на этапе выполнения определяется тип a и вызывается toString() из того класса, какого типа объект a. Это и есть позднее связывание. <p>В случае статического связывания используются не конкретные объекты, а информация о типе, то есть используется тип ссылочной переменной. С другой стороны, при динамическом связывании для нахождения нужного метода используется конкретный объект. <p>Исходя из того, что раннее связывание выполняется на этапе компиляции, а позднее - в рантайме, первый вариант обладает лучшим быстродействием, однако второй необходим для реализации полиморфизма."
  },
  "1012": {
    "id": 1012,
    "question": "Расскажите про SOLID",
    "answer": "SOLID — это акроним, образованный из заглавных букв первых пяти принципов ООП и проектирования. <p>S(Single Responsibility Principle) - принцип единственной ответственности - каждый класс выполняет лишь одну задачу. Легкая модификация в будущем, простое тестирование, класс не имеет зависимостей на другие классы. <p>O(Open Closed Principle) - принцип открытости/закрытости - программные сущности открыты для расширения и закрыты для модификации. Чтобы не сломать логику в классе-родителе, мы унаследуемся от него и реализуем что-то своё, и используем свой класс. <p>L(Liskov’s Substitution Principle) - принцип подстановки барбары лисков -  объекты в программе можно заменить их наследниками без изменения свойств программы. <p>I(Interface Segregation Principle) - принцип разделения интерфейса - много специализированных интерфейсов лучше, чем один общий. <p>D(Dependency Inversion Principle) - принцип инверсии зависимостей - зависимость на абстракциях. Модули верхних уровней не должны зависеть от модулей нижних уровней. Оба типа модулей должны зависеть от абстракций. Абстракции не должны зависеть от деталей. Детали должны зависеть от абстракций. Чтобы менять поведение классов. <p>Использование: Создание интерфейсов и их реализаций. Пример: терминал оплаты(абстракция) и разные карты оплаты."
  },
  "1013": {
    "id": 1013,
    "question": "Какая основная идея языка?",
    "answer": "«Написано однажды - работает везде». WORA (write once, run anywhere) Идея основывается в написании одного кода, который будет работать на любой платформе."
  },
  "1014": {
    "id": 1014,
    "question": "За счет чего обеспечивается кроссплатформенность?",
    "answer": "Кроссплатформенность была достигнута за счёт создания виртуальной машина Java. Java Virtual Machine или JVM - это программа, являющаяся прослойкой между операционной системой и Java программой. В среде виртуальной машины выполняются коды Java программ. Сама JVM реализована для разных ОС. Что байт код для JVM может исполняться везде где установлена JVM. Код не нужно перекомпилировать под каждую из платформ."
  },
  "1015": {
    "id": 1015,
    "question": "Какие преимущества у java?",
    "answer": "Объектно-ориентированное программирование - структура данных становится объектом, которым можно управлять для создания отношений между различными объектами. <p>Язык высокого уровня с простым синтаксисом и плавной кривой обучения. Синтаксис Java основан на C ++, поэтому Java похожа на C. Тем не менее, синтаксис Java проще, что позволяет новичкам быстрее учиться и эффективнее использовать код для достижения конкретных результатов. <p>Стандарт для корпоративных вычислительных систем. Корпоративные приложения — главное преимущество Java с 90-х годов, когда организации начали искать надежные инструменты программирования не на C. <p>Безопасность. Благодарю отсутствию указателей и Security Manager (политика безопасности, в которой можно указать правила доступа, позволяет запускать приложения Java в \"песочнице\"). <p>Независимость от платформы. Можно создать Java-приложение на Windows, скомпилировать его в байт-код и запустить его на любой другой платформе, поддерживающей виртуальную машину Java (JVM). Таким образом, JVM служит уровнем абстракции между кодом и оборудованием. <p>Язык для распределенного программирования и комфортной удаленной совместной работы. Специфическая для Java методология распределенных вычислений называется Remote Method Invocation (RMI). RMI позволяет использовать все преимущества Java: безопасность, независимость от платформы и объектно-ориентированное программирование для распределенных вычислений. Кроме того, Java также поддерживает программирование сокетов и методологию распределения CORBA для обмена объектами между программами, написанными на разных языках. <p>Автоматическое управление памятью. Разработчикам Java не нужно вручную писать код для управления памятью благодаря автоматическому управлению памятью (AMM). <p>Многопоточность. Поток — наименьшая единица обработки в программировании. Чтобы максимально эффективно использовать время процессора, Java позволяет запускать потоки одновременно, что называется многопоточностью. <p>Стабильность и сообщество. Сообщество разработчиков Java не имеет себе равных. Около 45% респондентов опроса StackOverflow 2018 используют Java."
  },
  "1016": {
    "id": 1016,
    "question": "Какие недостатки у java?",
    "answer": "Платное коммерческое использование (с 2019) <p>Низкая производительность из-за компиляции и абстракции с помощью виртуальной машины, а также приложение очистки памяти. <p>Не развитые инструменты по созданию GUI приложений на чистой java. <p>Многословный код. Java — это более легкая версия неприступного C ++, которая вынуждает программистов прописывать свои действия словами из английского языка. Это делает язык более понятным для неспециалистов, но менее компактным."
  },
  "1017": {
    "id": 1017,
    "question": "Что такое JDK? Что в него входит?",
    "answer": "JDK (Java Development Kit) - комплект разработчика приложений на языке Java, включает JRE и набор инструментов разработчика приложений на языке Java: <p>- компилятор Java (javac) <p>- стандартные библиотеки классов java <p>- примеры <p>- документацию <p>- различные утилиты"
  },
  "1018": {
    "id": 1018,
    "question": "Что такое JRE? Что в него входит?",
    "answer": "JRE (java Runtime Environment) - минимально-необходимая реализация виртуальной машины для исполнения Java-приложений. Состоит из JVM, ClassLoader и стандартного набора библиотек и классов Java."
  },
  "1019": {
    "id": 1019,
    "question": "Что такое JVM?",
    "answer": "JVM (Java Virtual Machine) - виртуальная машина Java исполняет байт-код Java, предварительно созданный из кода JIT компилятором, с помощью встроенного интерпретатора байт-кода. <p>HotSpot представляет собой реализацию концепции JVM."
  },
  "1020": {
    "id": 1020,
    "question": "Что такое byte code?",
    "answer": "Байт-код Java — набор инструкций, скомпилированный компилятором, исполняемый JVM."
  }



}